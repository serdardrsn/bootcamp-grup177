import streamlit as st
import pandas as pd
import joblib

# MODELLERİ YÜKLE
model = joblib.load("model.joblib")
label_encoder = joblib.load("label_encoder.joblib")
feature_columns = joblib.load("feature_columns.joblib")

st.set_page_config(page_title="Emergency Triage AI", layout="centered")
st.title("🚑 Emergency Triage AI")
st.markdown("Acil servise başvuran hastaların önceliklendirilmesini sağlayan yapay zeka destekli sistem.")

st.header("📋 Hasta Bilgilerini Girin")

# KULLANICI GİRİŞLERİ
SBP = st.number_input("Sistolik Kan Basıncı (SBP)", min_value=0)
DBP = st.number_input("Diyastolik Kan Basıncı (DBP)", min_value=0)
HR = st.number_input("Nabız (HR)", min_value=0)
RR = st.number_input("Solunum Sayısı (RR)", min_value=0)
BT = st.number_input("Vücut Isısı (BT)", min_value=30.0, max_value=45.0, step=0.1)
NRS_pain = st.slider("Ağrı Skoru (0-10)", 0, 10)
Age = st.number_input("Yaş", min_value=0)
Sex = st.radio("Cinsiyet", [1, 2], format_func=lambda x: "Kadın" if x == 1 else "Erkek")
Arrival_mode = st.selectbox("Geliş Şekli", [1, 2, 3, 4, 5, 6, 7])
Injury = st.radio("Travma Var mı?", [1, 2], format_func=lambda x: "Evet" if x == 1 else "Hayır")
Mental = st.selectbox("Mental Durumu", [1, 2, 3, 4])
Pain = st.radio("Görünür Ağrı Durumu", [0, 1])
Group = st.number_input("Grup (0-5)", min_value=0, max_value=5)
Patients_per_hour = st.number_input("Saatlik Hasta Sayısı", min_value=0)

if st.button("🚨 Tahmin Et"):
    # risk skoru
    risk_score = int((BT >= 38) + (HR >= 100) + (Age >= 70))

    # Özellikleri sözlük olarak oluştur
    input_dict = {
        "SBP": SBP, "DBP": DBP, "HR": HR, "RR": RR, "BT": BT, "NRS_pain": NRS_pain,
        "Age": Age, "Group": Group,
        "Patients number per hour": Patients_per_hour,
        "risk_score": risk_score,
        f"Sex_{Sex}": True,
        f"Arrival mode_{Arrival_mode}": True,
        f"Injury_{Injury}": True,
        f"Mental_{Mental}": True,
        f"Pain_{Pain}": True
    }

    # Eksik kalan tüm özellikleri False/0 olarak tamamla
    full_input = {
        col: input_dict.get(col, False if "Sex_" in col or "Arrival mode_" in col or "Injury_" in col or "Mental_" in col or "Pain_" in col else 0)
        for col in feature_columns
    }

    input_df = pd.DataFrame([full_input])

    # Tahmini al
    prediction = model.predict(input_df)[0]
    predicted_class = label_encoder.inverse_transform([prediction])[0]

    # Renk ve açıklamalar
    renk_map = {
        "Kırmızı": ("#FF4B4B", "🔴 <b>Kırmızı Alan:</b> Hayati risk taşıyan, <b>hemen müdahale</b> gerektiren durum."),
        "Sarı": ("#FFD700", "🟡 <b>Sarı Alan:</b> Orta düzey riskli, <b>en geç 30 dakika</b> içinde değerlendirme gerekli."),
        "Yeşil": ("#90EE90", "🟢 <b>Yeşil Alan:</b> Durumu stabil, <b>beklemesi</b> uygun.")
    }

    renk, aciklama = renk_map.get(predicted_class, ("#D3D3D3", "⚪️ Belirsiz sınıf."))

    # Renkli kutu göster
    st.markdown(
        f"""
        <div style='background-color: {renk}; padding: 20px; border-radius: 10px; text-align: center;'>
            <h2 style='color: black;'>{predicted_class}</h2>
            <p style='color: black; font-size: 18px;'>{aciklama}</p>
        </div>
        """,
        unsafe_allow_html=True
    )
